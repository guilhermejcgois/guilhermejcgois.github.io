!function(n,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t=e();for(var r in t)("object"==typeof exports?exports:n)[r]=t[r]}}(window,function(){return function(n){var e={};function t(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return n[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:r})},t.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=15)}([function(n,e,t){"use strict";var r=Object.prototype.hasOwnProperty;function i(n,e){return Array.isArray(n)?function(n,e){for(var t,r="",o="",a=Array.isArray(e),s=0;s<n.length;s++)(t=i(n[s]))&&(a&&e[s]&&(t=c(t)),r=r+o+t,o=" ");return r}(n,e):n&&"object"==typeof n?function(n){var e="",t="";for(var i in n)i&&n[i]&&r.call(n,i)&&(e=e+t+i,t=" ");return e}(n):n||""}function o(n){if(!n)return"";if("object"==typeof n){var e="";for(var t in n)r.call(n,t)&&(e=e+t+":"+n[t]+";");return e}return n+""}function a(n,e,t,r){return!1!==e&&null!=e&&(e||"class"!==n&&"style"!==n)?!0===e?" "+(r?n:n+'="'+n+'"'):("function"==typeof e.toJSON&&(e=e.toJSON()),"string"==typeof e||(e=JSON.stringify(e),t||-1===e.indexOf('"'))?(t&&(e=c(e))," "+n+'="'+e+'"'):" "+n+"='"+e.replace(/'/g,"&#39;")+"'"):""}e.merge=function n(e,t){if(1===arguments.length){for(var r=e[0],i=1;i<e.length;i++)r=n(r,e[i]);return r}for(var a in t)if("class"===a){var s=e[a]||[];e[a]=(Array.isArray(s)?s:[s]).concat(t[a]||[])}else if("style"===a){var s=o(e[a]);s=s&&";"!==s[s.length-1]?s+";":s;var c=o(t[a]);c=c&&";"!==c[c.length-1]?c+";":c,e[a]=s+c}else e[a]=t[a];return e},e.classes=i,e.style=o,e.attr=a,e.attrs=function(n,e){var t="";for(var s in n)if(r.call(n,s)){var c=n[s];if("class"===s){c=i(c),t=a(s,c,!1,e)+t;continue}"style"===s&&(c=o(c)),t+=a(s,c,!1,e)}return t};var s=/["&<>]/;function c(n){var e=""+n,t=s.exec(e);if(!t)return n;var r,i,o,a="";for(r=t.index,i=0;r<e.length;r++){switch(e.charCodeAt(r)){case 34:o="&quot;";break;case 38:o="&amp;";break;case 60:o="&lt;";break;case 62:o="&gt;";break;default:continue}i!==r&&(a+=e.substring(i,r)),i=r+1,a+=o}return i!==r?a+e.substring(i,r):a}e.escape=c,e.rethrow=function n(e,r,i,o){if(!(e instanceof Error))throw e;if(!("undefined"==typeof window&&r||o))throw e.message+=" on line "+i,e;try{o=o||t(6).readFileSync(r,"utf8")}catch(t){n(e,null,i)}var a=3,s=o.split("\n"),c=Math.max(i-a,0),l=Math.min(s.length,i+a);var a=s.slice(c,l).map(function(n,e){var t=e+c+1;return(t==i?"  > ":"    ")+t+"| "+n}).join("\n");e.path=r;e.message=(r||"Pug")+":"+i+"\n"+a+"\n\n"+e.message;throw e}},function(n,e,t){n.exports=t.p+"5c48f51fb182c2a148fc54ee482d12f2.jpg"},function(n,e,t){t(0);n.exports=function(n){var e="";return e+='<div class="footer-container page-section"><footer class="wrapper"><h3>footer</h3></footer></div>'}},function(n,e,t){t(0);n.exports=function(n){var e="";return e+='<section class="banner page-section"><div class="banner--background"></div><article class="banner--content"><h2 class="title">Guilherme Gois</h2><p class="text">Desenvolvedor Gorila, apreciador de um bom café, tarado por códigos bonitos, e apaixonado por essa menina aí! =p</p></article><div class="banner--overlay"></div><div class="banner--scroll"></div></section>'}},function(n,e,t){t(0);n.exports=function(n){var e="";return e+='<header class="header-fixed"><h1 class="header-fixed--title">  DEVGOIS  </h1><nav><ul><li><a href="#">Início</a></li><li><a href="#">Sobre</a></li><li><a href="#">Hard Skills</a></li><li><a href="#">Soft Skills</a></li><li><a href="#">Contato</a></li></ul></nav></header>'}},function(n,e,t){t(0);n.exports=function(n){var e="";return e+='<head><meta charSet="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><title>DEVGOIS</title><meta name="description" content=""><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="apple-touch-icon" href="apple-touch-icon.png"><link rel="stylesheet" href="styles/normalize.min.css"><link rel="stylesheet" href="styles/main.css"><script src="js/vendor/modernizr-2.8.3-respond-1.4.2.min.js"><\/script><script src="js/main.js"><\/script></head>'}},function(n,e){},function(n,e,t){t(0);n.exports=function(n){var e,r="";return r=r+'<!DOCTYPE html>\x3c!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang=""> <![endif]--\x3e\n\x3c!--[if IE 7]><html class="no-js lt-ie9 lt-ie8" lang=""> <![endif]--\x3e\n\x3c!--[if IE 8]><html class="no-js lt-ie9" lang=""> <![endif]--\x3e\n\x3c!--[if gt IE 8]>\x3c!--\x3e<html class="no-js" lang="pt-br">\x3c!--<![endif]--\x3e'+(null==(e=t(5).call(this,n))?"":e)+'<body>\x3c!--[if lt IE 8]><p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p><![endif]--\x3e\x3c!--include templates/under-construction.pug--\x3e'+(null==(e=t(4).call(this,n))?"":e)+(null==(e=t(3).call(this,n))?"":e)+(null==(e=t(2).call(this,n))?"":e)+"\x3c!--<script src=\"js/main.js\"><\/script>\n\nGoogle Analytics: change UA-XXXXX-X to be your site's ID.\n<script>\n\t(function(b, o, i, l, e, r) {\n\t\tb.GoogleAnalyticsObject = l;\n\t\tb[l] || (b[l] =\n\t\t\tfunction() {\n\t\t\t\t(b[l].q = b[l].q || []).push(arguments)\n\t\t\t});\n\t\tb[l].l = +new Date;\n\t\te = o.createElement(i);\n\t\tr = o.getElementsByTagName(i)[0];\n\t\te.src = '//www.google-analytics.com/analytics.js';\n\t\tr.parentNode.insertBefore(e, r)\n\t}(window, document, 'script', 'ga'));\n\tga('create', 'UA-XXXXX-X', 'auto');\n\tga('send', 'pageview');\n<\/script>--\x3e</body>"}},function(n,e){const t=Math.max(document.documentElement.clientHeight,window.innerHeight||0),r=document.getElementsByClassName("header-fixed")[0];document.addEventListener("scroll",n=>{n.pageY<t&&r.classList.contains("solid")?r.classList.remove("solid"):n.pageY>t&&!r.classList.contains("solid")&&r.classList.add("solid")})},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,r=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var i,o=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?n:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?t+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(n,e,t){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(n){var e={};return function(n){if("function"==typeof n)return n();if(void 0===e[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}}(),c=null,l=0,d=[],f=t(9);function p(n,e){for(var t=0;t<n.length;t++){var r=n[t],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(v(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],e));o[r.id]={id:r.id,refs:1,parts:s}}}}function u(n,e){for(var t=[],r={},i=0;i<n.length;i++){var o=n[i],a=e.base?o[0]+e.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function h(n,e){var t=s(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=d[d.length-1];if("top"===n.insertAt)r?r.nextSibling?t.insertBefore(e,r.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),d.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(n.insertInto+" "+n.insertAt.before);t.insertBefore(e,i)}}function b(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=d.indexOf(n);e>=0&&d.splice(e,1)}function g(n){var e=document.createElement("style");return void 0===n.attrs.type&&(n.attrs.type="text/css"),m(e,n.attrs),h(n,e),e}function m(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function v(n,e){var t,r,i,o;if(e.transform&&n.css){if(!(o=e.transform(n.css)))return function(){};n.css=o}if(e.singleton){var a=l++;t=c||(c=g(e)),r=w.bind(null,t,a,!1),i=w.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",m(e,n.attrs),h(n,e),e}(e),r=function(n,e,t){var r=t.css,i=t.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=f(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,e),i=function(){b(t),t.href&&URL.revokeObjectURL(t.href)}):(t=g(e),r=function(n,e){var t=e.css,r=e.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),i=function(){b(t)});return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else i()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=u(n,e);return p(t,e),function(n){for(var r=[],i=0;i<t.length;i++){var a=t[i];(s=o[a.id]).refs--,r.push(s)}n&&p(u(n,e),e);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete o[s.id]}}}};var x,y=(x=[],function(n,e){return x[n]=e,x.filter(Boolean).join("\n")});function w(n,e,t,r){var i=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=y(e,i);else{var o=document.createTextNode(i),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(o,a[e]):n.appendChild(o)}}},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[t].concat(o).concat([i]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<n.length;i++){var a=n[i];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e){n.exports=function(n){return"string"!=typeof n?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),/["'() \t\n]/.test(n)?'"'+n.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':n)}},function(n,e,t){var r=t(12);(n.exports=t(11)(!1)).push([n.i,'/*! HTML5 Boilerplate v5.0 | MIT License | http://h5bp.com/ */\nhtml {\n  color: #222;\n  font-size: 1em;\n  line-height: 1.4; }\n\n::-moz-selection {\n  background: #b3d4fc;\n  text-shadow: none; }\n\n::selection {\n  background: #b3d4fc;\n  text-shadow: none; }\n\nhr {\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid #ccc;\n  margin: 1em 0;\n  padding: 0; }\n\naudio, canvas, iframe, img, svg, video {\n  vertical-align: middle; }\n\nfieldset {\n  border: 0;\n  margin: 0;\n  padding: 0; }\n\ntextarea {\n  resize: vertical; }\n\n.browserupgrade {\n  margin: 0.2em 0;\n  background: #ccc;\n  color: #000;\n  padding: 0.2em 0; }\n\n/* ===== Initializr Styles ==================================================\n   Author: Jonathan Verrecchia - verekia.com/initializr/responsive-template\n   ========================================================================== */\nbody {\n  font: 16px/26px Helvetica, Helvetica Neue, Arial; }\n\n.wrapper {\n  width: 90%;\n  margin: 0 5%; }\n\n/* ===================\n    ALL: Orange Theme\n   =================== */\n.header-container {\n  border-bottom: 20px solid #e44d26; }\n\n.footer-container, .main aside {\n  border-top: 20px solid #e44d26; }\n\n.header-container, .footer-container, .main aside {\n  background: #f16529; }\n\n/* ==============\n    MOBILE: Menu\n   ============== */\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style-type: none; }\n\nnav a {\n  display: block;\n  margin-bottom: 10px;\n  padding: 15px 0;\n  text-align: center;\n  text-decoration: none;\n  font-weight: bold; }\n\nnav a:hover {\n  text-decoration: underline; }\n\n/* ==============\n    MOBILE: Main\n   ============== */\n.main {\n  padding: 30px 0; }\n\n.main article h1 {\n  font-size: 2em; }\n\n.main aside {\n  color: white;\n  padding: 0px 5% 10px; }\n\n.footer-container footer {\n  color: white;\n  padding: 20px 0; }\n\n/* ===============\n    ALL: IE Fixes\n   =============== */\n.ie7 .title {\n  padding-top: 20px; }\n\n/* ==========================================================================\n   Author\'s custom styles\n   ========================================================================== */\n/* ==========================================================================\n   Media Queries\n   ========================================================================== */\n@media only screen and (min-width: 480px) {\n  /* ====================\n    INTERMEDIATE: Menu\n   ==================== */\n  nav a {\n    float: left;\n    margin: 0 1.7%;\n    padding: 25px 2%;\n    margin-bottom: 0; }\n  nav li:first-child a {\n    margin-left: 0; }\n  nav li:last-child a {\n    margin-right: 0; }\n  /* ========================\n    INTERMEDIATE: IE Fixes\n   ======================== */\n  nav ul li {\n    display: inline; }\n  .oldie nav a {\n    margin: 0 0.7%; } }\n\n@media only screen and (min-width: 768px) {\n  /* ====================\n    WIDE: CSS3 Effects\n   ==================== */\n  .header-container, .main aside {\n    -webkit-box-shadow: 0 5px 10px #aaa;\n    -moz-box-shadow: 0 5px 10px #aaa;\n    box-shadow: 0 5px 10px #aaa; }\n  /* ============\n    WIDE: Menu\n   ============ */\n  .title {\n    float: left; }\n  nav {\n    float: right;\n    width: 38%; }\n  /* ============\n    WIDE: Main\n   ============ */\n  .main article {\n    float: left;\n    width: 57%; }\n  .main aside {\n    float: right;\n    width: 28%; } }\n\n@media only screen and (min-width: 1140px) {\n  /* ===============\n    Maximal Width\n   =============== */\n  .wrapper {\n    width: 1026px;\n    /* 1140px - 10% for margins */\n    margin: 0 auto; } }\n\n/* ==========================================================================\n   Helper classes\n   ========================================================================== */\n.hidden {\n  display: none !important;\n  visibility: hidden; }\n\n.visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto; }\n\n.invisible {\n  visibility: hidden; }\n\n.clearfix:before, .clearfix:after {\n  content: " ";\n  display: table; }\n\n.clearfix:after {\n  clear: both; }\n\n.clearfix {\n  *zoom: 1; }\n\n/* ==========================================================================\n   Print styles\n   ========================================================================== */\n@media print {\n  *, *:before, *:after {\n    background: transparent !important;\n    color: #000 !important;\n    box-shadow: none !important;\n    text-shadow: none !important; }\n  a, a:visited {\n    text-decoration: underline; }\n  a[href]:after {\n    content: " (" attr(href) ")"; }\n  abbr[title]:after {\n    content: " (" attr(title) ")"; }\n  a[href^="#"]:after, a[href^="javascript:"]:after {\n    content: ""; }\n  pre, blockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid; }\n  thead {\n    display: table-header-group; }\n  tr, img {\n    page-break-inside: avoid; }\n  img {\n    max-width: 100% !important; }\n  p, h2, h3 {\n    orphans: 3;\n    widows: 3; }\n  h2, h3 {\n    page-break-after: avoid; } }\n\n.banner--content {\n  align-items: center;\n  color: rgba(10, 48, 85, 0.5);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  left: calc(50vw - 50vw / 2);\n  opacity: 0.8;\n  position: absolute;\n  text-align: center;\n  top: 33%;\n  width: 50vw;\n  z-index: 1; }\n\n.banner--content:hover {\n  color: #0a3055;\n  opacity: 1; }\n\n.banner--content .title {\n  font-size: 36px;\n  font-weight: 900;\n  margin-bottom: 20px; }\n\n.banner--content .text {\n  font-size: 24px;\n  font-weight: 700; }\n\n.banner--overlay {\n  background: rgba(200, 200, 255, 0.5);\n  height: 100vh;\n  position: absolute;\n  top: 0;\n  width: 100vw; }\n\n.banner--background {\n  background-attachment: fixed;\n  background-image: url('+r(t(1))+");\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 100vh; }\n\n.banner--scroll {\n  border-color: gainsboro;\n  border-radius: 30px;\n  border-style: solid;\n  border-width: 3px;\n  bottom: 30px;\n  height: 40px;\n  left: calc(50vw - 30px / 2);\n  position: absolute;\n  width: 30px; }\n\n.banner--scroll:before {\n  animation: scroll-point 1.4s ease-in infinite;\n  border-color: gainsboro;\n  border-radius: 50%;\n  border-style: solid;\n  border-width: 3px;\n  height: 3px;\n  left: calc(50% - 3px);\n  top: 5px;\n  width: 3px; }\n\n@keyframes scroll-point {\n  from { }\n  to {\n    opacity: 0;\n    top: 13.33333px; } }\n\n@media only screen and (max-device-width: 1366px) {\n  .banner-background {\n    background-attachment: scroll; } }\n\n.header-fixed {\n  background: transparent;\n  display: flex;\n  height: 70px;\n  justify-content: space-between;\n  position: fixed;\n  transition: background 0.6s;\n  width: 100%;\n  z-index: 100; }\n  .header-fixed.solid {\n    background: #c8c8ff;\n    box-shadow: 0px 1px 25px 0px rgba(0, 0, 0, 0.75); }\n  .header-fixed--title {\n    border: 5px solid #0a3055;\n    color: #0a3055;\n    display: block;\n    height: 50px;\n    line-height: 1.3;\n    margin: 10px;\n    text-align: center;\n    white-space: pre; }\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; }\n\n*:before, *:after {\n  content: '';\n  display: block;\n  position: absolute;\n  box-sizing: border-box; }\n\nhtml, body {\n  height: 100vh; }\n\n.page-section {\n  position: relative;\n  height: 100vh;\n  width: 100vw; }\n",""])},function(n,e,t){var r=t(13);"string"==typeof r&&(r=[[n.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(10)(r,i);r.locals&&(n.exports=r.locals)},function(n,e,t){"use strict";t.r(e);t(1),t(14),t(8);document=t(7)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,